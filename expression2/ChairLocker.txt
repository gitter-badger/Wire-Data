#
# IMPORTANT: DO NOT REMOVE OR MODIFY THIS HEADER!
#
# CREDITS / CONTRIBUTORS:
#   Originally created/developed and maintained by STEAM_0:0:65979910 (http://steamcommunity.com/profiles/76561198092225548/ - STEAM_0:0:65979910; U:1:131959820); TheCaptainPrice a.k.a. CaptainPRICE.
#   Chat parsing improvements by STEAM_0:0:9583907 (http://steamcommunity.com/profiles/76561197979433542/ - STEAM_0:0:9583907; U:1:19167814); Divran.
#
# LICENSE:
#   Copyright (C) 2016 CaptainPRICE
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# END OF LICENSE.
#
# DESCRIPTION:
#   Simple and effective Expression 2 script which allows you (and players that trusts you) to easily lock any chair/seat owned by you (or player you trust).
#
# SETUP / INSTALLATION INSTRUCTIONS:
#   Spawn this E2 on chair/seat to lock it (or use chat command (case-insensitive): lockchair <entity ID>).
#   To unlock chair/seat, remove this E2 from it (or use chat command (case-insensitive): unlockchair <entity ID>).
#   It is also possible to toggle current state using "togglechair" (case-insensitive) chat-command (but first aim on E2/chair or enter a chair/seat to toggle, notice this chat-command does not take any arguments).
#   Good feature about this is, it works independently and allows multiple chairs to be controlled (just need to spawn a separate ChairLocker E2 on each).
#   To lock/unlock multiple vehicles using a single command, just separate entity IDs with comma (e.g. "unlockseat 123, 456, 1001" will try to unlock 3 vehicles at once, if something goes wrong you will be notified).
#   This includes prop-protection support, so your buddies have access granted automatically (they can use chat commands, just like you and also you are able to see their Steam ID/nickname when they perform lock/unlock).
#   If you want chair/seat to be automatically removed as you remove ChairLocker E2 from it, wire/set "ChairRemovalOnE2Remove" input to 1 (note: requires "propcore" extension enabled).
#   If you want to automatically eject the driver (if any) when the vehicle gets locked, wire/set "EjectDriverOnLock" input to 1.
#   If you want chair/seat to make itself not-solid when the vehicle gets locked, wire/set "SetNotSolidOnLock" input to 0 (note: requires "propcore" extension enabled).
#
# Repository URL: https://github.com/CaptainPRICE/Wire-Data
# For more details, please visit a thread on the forums: http://www.wiremod.com/forum/finished-contraptions/35272-easy-vehicle-locker-unlocker-e2.html
# In this E2, I have implemented a bit more advanced chat-command parsing. Thanks to Divran for improvements.
# I hope you will learn something new from it. As always, have fun!
#

@name ChairLocker
#ifdef entity:propDelete()
@inputs ChairRemovalOnE2Remove
#endif
#ifdef entity:ejectPod()
@inputs EjectDriverOnLock
#endif
#ifdef entity:propNotSolid( number )
@inputs SetNotSolidOnLock
#endif
@outputs Chair:entity [ID IsLocked]
@persist [STATE_LOCK STATE_UNLOCK]
@model models/bull/gates/processor.mdl
@trigger none

if ( dupefinished() )
{
    exit()
}
if ( duped() )
{
    reset()
}
if ( first() )
{
#ifndef entity:lockPod( number )
    error( "Can not continue due core entity functionality is missing!" )
#endif

    Chair = entity():isWeldedTo()
    if ( !Chair:isVehicle() )
    {
        error( "Not spawned on a chair/seat (entity of type 'vehicle')." )
    }
    ID = Chair:id()

    STATE_LOCK = 1

    #
    # A function that is called after IsLocked is changed (used to lock or unlock the chair depending on the value of IsLocked).
    #
    function handleLock( Player:entity )
    {
        if ( !Player:isPlayer() )
        {
            return # Console said something?
        }
#ifdef entity:propNotSolid( number )
        if ( ->SetNotSolidOnLock & SetNotSolidOnLock )
        {
            Chair:propNotSolid( IsLocked )
        }
        else
        {
            Chair:propNotSolid( 0 )
        }
#endif
        Chair:lockPod( IsLocked )
        local Message = ""
        if ( IsLocked )
        {
#ifdef entity:ejectPod()
            if ( ->EjectDriverOnLock & EjectDriverOnLock )
            {
                Chair:ejectPod()
            }
#endif
            Message = "ChairLocker: (" + Player:steamID() + ") " + Player:name() + " has locked " + toString( Chair ) + "."
            setName( "Easy Vehicle Locker/Unlocker\nID: " + ID + "\nState: Locked" )
        }
        else
        {
            Message = "ChairLocker: (" + Player:steamID() + ") " + Player:name() + " has unlocked " + toString( Chair ) + "."
            setName( "Easy Vehicle Locker/Unlocker\nID: " + ID + "\nState: Unlocked" )
        }
        soundPlay( "vehicle_alarm_" + ID, soundDuration( "k_lab.teleport_alarm" ), "k_lab.teleport_alarm" )
        print( Message )
        hint( Message, 7 )
    }

    #
    # A function that occurs whenever some valid player (either you or player you trust) says lock* or unlock* command in chat (case-insensitive).
    #
    function onChairChatCommandHandler( LastSpoke:entity, LastSaidTrim:string, SplitLastSaid:array, State:number )
    {
        if ( LastSpoke == owner() )
        {
            hideChat( 1 )
        }
        #printColor( ">> ", teamColor( LastSpoke:team() ), LastSpoke:name(), vec( 255 ), ": " + LastSaidTrim ) # BUG: Prints more than once when multiple ChairLocker E2s are active (TODO: Fix using data-signals or global-table).
        local Command = SplitLastSaid:removeString( 1 )
        SplitLastSaid = SplitLastSaid:concat( " " ):replace( " ", "" ):explode( "," )
        for ( I = 1, SplitLastSaid:count() )
        {
            local EntIndex = SplitLastSaid[ I, string ]:toNumber()
            if ( EntIndex < 1 )
            {
                continue # Silently ignore.
            }
            local Ent = entity( EntIndex )
            if ( !Ent:isVehicle() )
            {
                print( "ChairLocker: Skipping. Specified entity ID (" + EntIndex + ") is not a vehicle." )
                continue
            }
            if ( Ent:id() != ID )
            {
                continue # If not controlled by this E2 unit, just skip it.
            }
            if ( Ent:owner() != owner() & !Ent:owner():trusts( owner() ) )
            {
                print( "ChairLocker: Skipping. Specified entity ID (" + EntIndex + ") is not owned by you nor owner trusts you." )
                continue
            }
            if ( IsLocked & State == STATE_LOCK )
            {
                print( "ChairLocker: (" + LastSpoke:steamID() + ") " + LastSpoke:name() + " has attempted to lock an already locked vehicle (" + EntIndex + ")." )
                continue
            }
            if ( !IsLocked & State == STATE_UNLOCK )
            {
                print( "ChairLocker: (" + LastSpoke:steamID() + ") " + LastSpoke:name() + " has attempted to unlock an already unlocked vehicle (" + EntIndex + ")." )
                continue
            }
            IsLocked = State == STATE_LOCK
            handleLock( LastSpoke )
        }
    } # End of onChairChatCommandHandler( entity, string, array, number ) function

#ifdef entity:propFreeze( number )
    Chair:propFreeze( 1 )
#endif
#ifdef noCollideAll( entity, number )
noCollideAll( Chair, 0 ) # Using Constraint Core to fix an issue with servers where a vehicle has disabled collisions by default (as spawned).
#endif
#ifdef entity:removeNoCollideAll()
Chair:removeNoCollideAll() # Using Nexus Core to fix an issue with servers where a vehicle has disabled collisions by default (as spawned).
#endif
#ifdef entity:setSkin( number )
    entity():setSkin( 1 )
#endif
    IsLocked = STATE_LOCK # Default state when E2 is spawned on a vehicle; STATE_LOCK = lock chair/seat.
    handleLock( owner() )
    runOnChat( 1 )
    runOnLast( 1 )
} # End of first()
elseif ( chatClk() )
{
    local LastSpoke = lastSpoke()
    if ( !LastSpoke:isPlayer() | ( LastSpoke != owner() & !owner():trusts( LastSpoke ) ) )
    {
        exit()
    }
    local Trim = LastSpoke:lastSaid():trim()
    local Exp = Trim:explode( " " )
    switch ( Exp[ 1, string ]:lower() )
    {
        case "lockchair",
        case "lockseat",
        case "lockvehicle",
            onChairChatCommandHandler( LastSpoke, Trim, Exp, STATE_LOCK )
            break
        case "unlockchair",
        case "unlockseat",
        case "unlockvehicle",
            onChairChatCommandHandler( LastSpoke, Trim, Exp, STATE_UNLOCK )
            break
        case "togglechair",
        case "toggleseat",
        case "togglestate",
        case "togglevehicle",
            hideChat( 1 )
            #printColor( ">> ", teamColor( LastSpoke:team() ), LastSpoke:name(), vec( 255 ), ": " + Trim ) # BUG: Prints more than once when multiple ChairLocker E2s are active (TODO: Fix using data-signals or global-table).
            if ( ( !LastSpoke:inVehicle() | LastSpoke:vehicle() != Chair ) & LastSpoke:aimEntity() != entity() & LastSpoke:aimEntity() != Chair )
            {
                break
            }
            IsLocked = !IsLocked
            handleLock( LastSpoke )
            break
    }
} # End of chatClk()
elseif ( last() )
{
#ifdef entity:propDelete()
    if ( ->ChairRemovalOnE2Remove & ChairRemovalOnE2Remove & Chair:isVehicle() )
    {
        # Delete chair/seat when E2 gets removed.
        Chair:propDelete()
    }
#endif
#ifdef entity:propNotSolid(number)
    Chair:propNotSolid( 0 )
#endif
    IsLocked = STATE_UNLOCK
    Chair:lockPod( IsLocked ) # Unlock a chair.
    exit()
} # End of last()
if ( !Chair:isVehicle() )
{
    # Destroy E2 when chair/seat gets removed.
    selfDestruct()
}
