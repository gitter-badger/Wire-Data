#
# IMPORTANT: DO NOT REMOVE OR MODIFY THIS HEADER!
#
# CREDITS / CONTRIBUTORS:
#   Originally created/developed and maintained by STEAM_0:0:65979910 (http://steamcommunity.com/profiles/76561198092225548/ - STEAM_0:0:65979910; U:1:131959820); TheCaptainPrice a.k.a. CaptainPRICE.
#   Thanks to STEAM_0:1:45759946 for thirdperson suggestion (http://steamcommunity.com/profiles/76561198051785621/ - STEAM_0:1:45759946; U:1:91519893); Gaghr.
#
# LICENSE:
#   Copyright (C) 2016 CaptainPRICE
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# END OF LICENSE.
#
# SETUP / INSTALLATION INSTRUCTIONS:
#   Save this text file to GarrysMod/garrysmod/data/expression2 folder.
#   Requires Wire and Unofficial Wire Extras (UWSVN) addons to be installed and also "propcore" Expression 2 extension enabled on the server; otherwise this won't work.
#   Spawn this E2 code, then spawn a render target (RT) camera (from Wire - Extras). Using Wire Advanced tool, wire "Camera [ENTITY]" input from Expression 2 to RT camera's "Create Entity [ENTITY]" (entity) output.
#   By default (when spawned), it will target/spy on You. To change the target player, open chatbox and say "spy X" (without double-quotes, case-insensitive), where X is optional argument/parameter that takes either player Steam ID or nick/name. To get list of Steam IDs (of all players on the current server), open (Developer) Console (make sure you have enabled it in Options first) and submit "status" command.
#   If you do not specify a valid player Steam ID nor nick/name to "spy" chat-command, it will make an additional check if you are aiming on a valid player (if you are aiming on a vehicle, it will get the driver), if valid target was found it will spy on that player and notify you about it; otherwise you will get an error message describing what went wrong (it is user-friendly).
#   SpyCam can now be hacked/shutdown once the target player enters a correct secret code (remember to set/wire "IsHackable" input to 1 to enable this functionality).
#   If you want SpyCam to automatically try to hack itself when the target player enters up to 4 digits (removes the need to hit enter/return key), then wire/set "AutoTryCode" input to 1.
#   If you want to spy on the target player in thirdperson mode, then wire/set "Thirdperson" input to 1 (adjust position using ThirdpersonForwardOffset/ThirdpersonRightOffset/ThirdpersonUpOffset variables, see lines 58-60).
#
#  Forum thread URL: http://www.wiremod.com/forum/finished-contraptions/35243-spycam-e2-first-public-e2-release.html
#  Repository URL: https://github.com/CaptainPRICE/Wire-Data
#  Contributions/forks are welcome, looking for tweaks/optimizations!
#  There are a few known bugs which can not be fixed using Expression 2.
#  This E2 uses object-oriented programming style. Personally I think this is one decent E2 for beginners to learn from.
#  I hope everybody will enjoy and also learn something new from this E2 (it is not just "spying")! :)
#  Happy spying, CaptainPRICE.
#  P.S. I have integrated auto-updater, so you don't have to check for updates manually (checks for updates once per upload)!
#

@name SpyCam
@inputs Camera:entity [AutoTryCode EnablePerformanceMode IsHackable Thirdperson]
@persist [HackSounds Version]:array Screen:entity [CODE_EMPTY CODE_FAILURE CODE_SUCCESS INVALID_VERSION_NUMBER MAJOR_AVAILABLE MINOR_AVAILABLE NO_UPDATE_AVAILABLE PATCH_AVAILABLE SPY_INVALID_TARGET SPY_NEW_TARGET SPY_SAME_TARGET Key0 Key1 Key2 Key3 Key4 Key5 Key6 Key7 Key8 Key9 KeyEnter ThirdpersonForwardOffset ThirdpersonRightOffset ThirdpersonUpOffset] [ServerFileURL Steam2IdentifierPattern VersionFilePath VersionPattern VersionTextFileURL]:string CameraWL:wirelink
@outputs Target:entity Hacked [EnteredCode SecretCode VersionString]:string

# (Advanced) Duplicator support, the right way.
if ( dupefinished() )
{
    exit()
}
if ( duped() )
{
    reset()
}

# This is where magic starts.
if ( first() )
{
    # Constant definitions.
    Version = array( 4, 2, 1 ) # Force upgrade by assigning Version to array(1,0,0).
    VersionPattern = "^(%d+)%.(%d+)%.(%d+)$"
    VersionString = Version:concat( "." )
    VersionFilePath = "updates/spycam/version.txt"
    VersionTextFileURL = "https://raw.githubusercontent.com/CaptainPRICE/Wire-Data/master/e2files/updates/spycam/version.txt"
    ServerFileURL = "https://raw.githubusercontent.com/CaptainPRICE/Wire-Data/master/expression2/SpyCam.txt"
    Steam2IdentifierPattern = "^STEAM_0:[0|1]:[0-9]+$"
    HackSounds = array( "vo/npc/male01/thehacks01.wav", "vo/npc/male01/thehacks02.wav", "vo/npc/male01/hacks01.wav", "vo/npc/male01/hacks02.wav" )
    ThirdpersonForwardOffset = -130  # Forward offset (used for thirdperson). Negative number makes camera go backward (clamped at -/+1000).
    ThirdpersonRightOffset   = 1     # Right offset (used for thirdperson). Negative number makes camera go left (clamped at -/+1000).
    ThirdpersonUpOffset      = -15   # Up offset (used for thirdperson). Negative number makes camera go down (clamped at -/+1000).
    # CODE enumeration (used by tryBreakSecretCode function):
    CODE_FAILURE = -1
    CODE_EMPTY = 0
    CODE_SUCCESS = 1
    # Enumerations used by auto-updater feature:
    MAJOR_AVAILABLE = 3
    MINOR_AVAILABLE = 2
    PATCH_AVAILABLE = 1
    NO_UPDATE_AVAILABLE = 0
    INVALID_VERSION_NUMBER = -1
    # SPY enumeration (used by trySetTarget function).
    SPY_INVALID_TARGET = -1
    SPY_SAME_TARGET = 0
    SPY_NEW_TARGET = 1

#ifndef propCanCreate() | propSpawnEffect( number ) | propSpawnUndo( number ) | propSpawn( string, vector, angle, number ) | entity:parentTo( entity ) | entity:propDelete() | entity:propFreeze( number ) | entity:propNotSolid( number ) | entity:setAng( angle ) | entity:setColor( vector4 ) | entity:setPos( vector )
    error( "SpyCam: Can not continue due propcore extension is not enabled on this server." )
#endif

    #
    # Based on real-world software versioning.
    # Compares local version with server version number (format is "MAJOR.MINOR.PATCH").
    # Returns INVALID_VERSION_NUMBER when called with invalid arguments or when local major/minor/patch is greater than server major/minor/patch.
    # Returns MAJOR_AVAILABLE when local major < server major.
    # Returns MINOR_AVAILABLE when local minor < server minor.
    # Returns PATCH_AVAILABLE when local patch < server patch.
    # Returns NO_UPDATE_AVAILABLE when local version == server version.
    #
    function number compareVersion( Local:string, Server:string )
    {
        local LocalVersion = Local:match( VersionPattern )
        local ServerVersion = Server:match( VersionPattern )
        if ( LocalVersion:count() != 3 | ServerVersion:count() != 3 )
        {
            # Received invalid input.
            return INVALID_VERSION_NUMBER
        }
        local LocalMajor = LocalVersion[ 1, string ]:toNumber()
        local ServerMajor = ServerVersion[ 1, string ]:toNumber()
        if ( LocalMajor < ServerMajor )
        {
            # Major version differs.
            return MAJOR_AVAILABLE
        }
        if ( LocalMajor > ServerMajor )
        {
            # Local major should not go above server major.
            return INVALID_VERSION_NUMBER
        }
        # Major is up-to-date. Check minor number.
        local LocalMinor = LocalVersion[ 2, string ]:toNumber()
        local ServerMinor = ServerVersion[ 2, string ]:toNumber()
        if ( LocalMinor < ServerMinor )
        {
            # Minor version differs.
            return MINOR_AVAILABLE
        }
        if ( LocalMinor > ServerMinor )
        {
            # Local minor should not go above server minor.
            return INVALID_VERSION_NUMBER
        }
        local LocalPatch = LocalVersion[ 3, string ]:toNumber()
        local ServerPatch = ServerVersion[ 3, string ]:toNumber()
        # Major and minor are up-to-date. Check patch number.
        if ( LocalPatch < ServerPatch )
        {
            # Patch version differs.
            return PATCH_AVAILABLE
        }
        if ( LocalPatch > ServerPatch )
        {
            # Local patch should not go above server patch.
            return INVALID_VERSION_NUMBER
        }
        # Local is up-to-date with server.
        return NO_UPDATE_AVAILABLE
    }

    #
    # Fetches a new update.
    #
    function fetchNewUpdate( ResponseCode:number )
    {
        local UpdateMessage = ""
        switch ( ResponseCode )
        {
            case MAJOR_AVAILABLE,
                UpdateMessage = format( "SpyCam v%s: New major update is available for download!", VersionString )
                break
            case MINOR_AVAILABLE,
                UpdateMessage = format( "SpyCam v%s: New minor update is available for download!", VersionString )
                break
            case PATCH_AVAILABLE,
                UpdateMessage = format( "SpyCam v%s: New patch update is available for download!", VersionString )
                break
            case NO_UPDATE_AVAILABLE,
                UpdateMessage = format( "SpyCam v%s: No newer updates available, you are running the most recent SpyCam :)", VersionString )
                break
            case INVALID_VERSION_NUMBER,
                error( "SpyCam: Running on invalid version number (local version is out-of-sync)!" )
                break
            default,
                error( format( "SpyCam v%s: Unhandled response code in fetchNewUpdate function (code=%s)!", VersionString, ResponseCode ) )
                break
        }
        hint( UpdateMessage, 7 )
        print( UpdateMessage )
        if ( ResponseCode != NO_UPDATE_AVAILABLE )
        {
            timer( "downloadnewupdate", httpCanRequest() ? 10 : 3000 )
        }
    }

    #
    # Checks if supplied string is valid Steam2 identifier (STEAM_0).
    #
    function number isValidSteamId( SteamId:string )
    {
        return SteamId:match( Steam2IdentifierPattern ):count() == 1
    }

    #
    # Attempts to find a player with supplied Steam ID string.
    #
    function entity findPlayerBySteamId( SteamId:string )
    {
        SteamId = SteamId:upper()
        if ( !isValidSteamId( SteamId ) )
        {
            return noentity()
        }
        foreach ( K, Player:entity = players() )
        {
            if ( Player:steamID() == SteamId )
            {
                return Player
            }
        }
        return noentity()
    }

    #
    # Attempts to find a player by (partial) nick/name.
    # This function is just an alias to findPlayerByName function.
    #
    function entity findPlayerByPartialName( Name:string )
    {
        return findPlayerByName( Name )
    }

    #
    # Returns a string of length 4 from specified number (in leading-zero format when Num < 1000).
    #
    function string toCodeString( Num:number )
    {
        local Return = Num:toString():sub( 1, 4 )
        while ( Return:length() < 4 )
        {
            Return = "0" + Return
        }
        return Return
    }

#ifdef keyClkPressed()
    #
    # Used to set a new secret code.
    #
    function setNewSecretCode()
    {
        SecretCode = ( ->IsHackable & IsHackable & !Hacked ) ? toCodeString( ( randint( 0, 10000 ) + randint( 0, 10000 ) ) % 10000 ) : ""
        EnteredCode = ""
    }

    #
    # Internal function used with handleSecretCodeBreak function.
    # Returns CODE_EMPTY if the length of entered code is less than 1.
    # Returns CODE_SUCCESS if entered code matches the secret code; otherwise CODE_FAILURE is returned.
    #
    function number tryBreakSecretCode()
    {
        if ( EnteredCode:length() < 1 )
        {
            return CODE_EMPTY
        }
        EnteredCode = toCodeString( EnteredCode:toNumber() )
        return ( EnteredCode == SecretCode ) ? CODE_SUCCESS : CODE_FAILURE
    }

    #
    # Event handler that occurs when the target player enters a correct secret code.
    #
    function onSecretCodeHacked()
    {
        timer( "hacked", 3000 ) # Completely shutdown after 3000ms (3 seconds).
        setNewSecretCode()
        local HackSound = HackSounds[ randint( HackSounds:count() ), string ]
        entity():soundPlay( "spycamhacked", soundDuration( HackSound ), HackSound )
        print( format( "SpyCam v%s: Hacked!!! Shutting down. (%s) %s has entered correct secret code.", VersionString, Target:steamID(), Target:name() ) )
    }

    #
    # Event handler that occurs when the target player enters an incorrect secret code.
    #
    function onSecretCodeFailure()
    {
        EnteredCode = ""
    }

    #
    # Main function that is run when the target player attempts to hack a secret code (or shutdown SpyCam).
    #
    function handleSecretCodeBreak()
    {
        if ( !->IsHackable | !IsHackable | Hacked )
        {
            return
        }
        local ReturnCode = tryBreakSecretCode()
        switch ( ReturnCode )
        {
            case CODE_EMPTY,
                break
            case CODE_FAILURE,
                onSecretCodeFailure()
                break
            case CODE_SUCCESS,
                onSecretCodeHacked()
                break
            default,
                error( format( "SpyCam v%s: Unsupported return code returned by tryBreakSecretCode function (code=%s)!", VersionString, ReturnCode ) )
                break
        }
    }

    #
    # Used when changing target player, to listen on new target player's keys.
    #
    function runOnTargetKeys()
    {
        if ( !->IsHackable | !IsHackable )
        {
            return
        }
        foreach ( K, Player:entity = players() )
        {
            runOnKeys( Player, 0 )
        }
        if ( Target:isValid() & Target:isPlayer() )
        {
            runOnKeys( Target, 1 )
        }
    }

    #
    # Event handler that occurs whenever "IsHackable" input is changed.
    #
    function onIsHackableChanged()
    {
        # Update secret code.
        setNewSecretCode()
        # Start/stop listening on the target player keys.
        runOnTargetKeys()
    }
#endif

    #
    # Returns 1 when Camera input is wired to a valid render-target (RT) camera entity/object; otherwise 0.
    #
    function number isCameraValid()
    {
        return ->Camera & Camera:isValid() & Camera:type() == "gmod_wire_rtcam"
    }

    #
    # Used as an argument "ReturnCode" with announceSetTarget function.
    # Attempts to set the new target player to spy on (also generates a new secret code if hacking functionality is enabled).
    # Returns SPY_INVALID_TARGET if NewTarget is not valid entity/object.
    # Returns SPY_SAME_TARGET if NewTarget is the same entity as Target.
    # Returns SPY_NEW_TARGET if Target was successful set to NewTarget.
    #
    function number trySetTarget( NewTarget:entity )
    {
        if ( !NewTarget:isValid() )
        {
            return SPY_INVALID_TARGET
        }
        if ( NewTarget:isVehicle() )
        {
            return trySetTarget( NewTarget:driver() )
        }
        if ( !NewTarget:isPlayer() )
        {
            return SPY_INVALID_TARGET
        }
        if ( NewTarget == Target )
        {
            return SPY_SAME_TARGET
        }
        Target = NewTarget
#ifdef keyClkPressed()
        onIsHackableChanged()
#endif
        return SPY_NEW_TARGET
    }

    #
    # Event handler that occurs whenever the target is changed (run after trySetTarget function).
    #
    function onNewTargetEventHandler()
    {
        print( format( "SpyCam v%s: Now spying on (%s) %s.", VersionString, Target:steamID(), Target:name() ) )
        soundPlay( "newtargetsound", soundDuration( "Buttons.snd19" ), "Buttons.snd19" )
    }

    #
    # Callback function for "spy" chat-command that runs after trySetTarget function (used to announce the new target).
    #
    function announceSetTarget( ReturnCode:number )
    {
        switch ( ReturnCode )
        {
            case SPY_INVALID_TARGET,
                print( format( "SpyCam v%s: Invalid syntax provided/Could not find a valid target (correct syntax: 'spy <player Steam ID or name>' or aim on player/vehicle and say 'spy' to spy on that player/driver).", VersionString ) )
                soundPlay( "invalidsyntaxsound", soundDuration( "Buttons.snd10" ), "Buttons.snd10" )
                break
            case SPY_SAME_TARGET,
                print( format( "SpyCam v%s: Already spying on (%s) %s.", VersionString, Target:steamID(), Target:name() ) )
                soundPlay( "alreadyspyingsound", soundDuration( "Buttons.snd2" ), "Buttons.snd2" )
                break
            case SPY_NEW_TARGET,
                onNewTargetEventHandler()
                break
            default,
                error( format( "SpyCam v%s: Unsupported return code passed to announceSetTarget function (code=%s)!", VersionString, ReturnCode ) )
                break
        }
    }

    #
    # Returns the movement data string.
    #
    function string entity:getMovementData()
    {
        local Data = ""
        if ( This:keyForward() )
        {
            Data += "forward "
        }
        elseif ( This:keyBack() )
        {
            Data += "back "
        }
        if ( This:keyLeft() )
        {
            Data += "left "
        }
        elseif ( This:keyRight() )
        {
            Data += "right "
        }
        if ( This:keySprint() )
        {
            Data += "sprint "
        }
        if ( This:keyJump() )
        {
            Data += "jump "
        }
        if ( This:keyDuck() )
        {
            Data += "duck "
        }
        if ( This:keyUse() )
        {
            Data += "use "
        }
        if ( This:keyReload() )
        {
            Data += "reload "
        }
        if ( This:keyAttack1() )
        {
            Data += "attack1 "
        }
        elseif ( This:keyAttack2() )
        {
            Data += "attack2 "
        }
        if ( This:isTyping() )
        {
            Data += "typing "
        }
        return Data:trimRight()
    }

    #
    # Returns the current time (in HH:MM:SS format).
    #
    function string timeNow( TwelveHour:number )
    {
        local Hour = ( ( time( "hour" ) + time( "isdst" ) ) % ( TwelveHour ? 12 : 24 ) ):toString()
        if ( Hour:length() < 2 )
        {
            Hour = "0" + Hour
        }
        local Min = ( time( "min" ) % 60 ):toString()
        if ( Min:length() < 2 )
        {
            Min = "0" + Min
        }
        local Sec = ( time( "sec" ) % 60 ):toString()
        if ( Sec:length() < 2 )
        {
            Sec = "0" + Sec
        }
        return format( "%s:%s:%s", Hour, Min, Sec )
    }

    runOnFile( 1 )
    runOnHTTP( 1 )
    if ( !fileCanLoad() | !httpCanRequest() | !propCanCreate() )
    {
        reset()
        exit()
    }
    fileLoad( VersionFilePath )
    httpRequest( VersionTextFileURL )

    if ( convarnum( "wire_expression2_concmd" ) )
    {
        # Requires concmd enabled:
        #  Automatically switch to RT camera tool when this E2 gets spawned (simply to save time).
        concmd( "gmod_toolmode wire_rtcam" )
    }
    propSpawnEffect( 0 )
#ifdef propSpawnUndo( number )
    propSpawnUndo( 0 )
#endif
    local Ang = entity():angles()
    Ang = angnorm( ang( Ang:pitch() - 90, Ang:yaw(), Ang:roll() ) )
    Screen = propSpawn( "models/props_phx/rt_screen.mdl", entity():pos() + ( entity():forward() * vec( 23.5 ) ), Ang, 1 )
    if ( !Screen:isValid() )
    {
        error( "SpyCam: Can not continue due RT screen failed to spawn." )
    }
    Screen:parentTo( entity() )
    Screen:propNotSolid( 1 )
    trySetTarget( owner() ) # Default target to spy on.
    rangerPersist( 1 )
    rangerFilter( Target )
    rangerFlags( "e" ) # Hit entities and world.

    runOnChat( 1 )
    runOnLast( 1 )
    runOnTick( 1 )
}
elseif ( chatClk( owner() ) )
{
    # Controlling using chat commands.
    local Trim = owner():lastSaid():trim()
    local Exploded = Trim:explode( " " )
    switch ( Exploded[ 1, string ]:lower() )
    {
        case "spy",
            hideChat( 1 )
            Exploded:removeString( 1 )
            Trim = Exploded:concat( " " ):trim()
            local ReturnCode = SPY_INVALID_TARGET
            if ( Trim:length() > 1 )
            {
                # Optional argument is not empty. Check input against Steam2 ID.
                ReturnCode = trySetTarget( findPlayerBySteamId( Trim ) )
                if ( ReturnCode == SPY_INVALID_TARGET )
                {
                    # Input is not a valid Steam2 ID? Find a player by (partial) nick/name.
                    ReturnCode = trySetTarget( findPlayerByPartialName( Trim ) )
                }
            }
            if ( ReturnCode == SPY_INVALID_TARGET )
            {
                # Still invalid target? Check aim entity.
                ReturnCode = trySetTarget( owner():aimEntity() )
            }
            announceSetTarget( ReturnCode ) # Run the callback function.
            break
    }
}
elseif ( fileClk( VersionFilePath ) )
{
    # Upgrade detection.
    local FileStatus = fileStatus()
    switch ( FileStatus )
    {
        case _FILE_404,
            if ( !fileCanWrite() )
            {
                print( format( "SpyCam v%s: Could not write a version file!", VersionString ) )
                break
            }
            fileWrite( VersionFilePath, VersionString )
            break
        case _FILE_OK,
            local ReadVersion = fileRead():match( VersionPattern )
            local ReadVersionString = ReadVersion:concat( "." )
            local ResponseCode = compareVersion( ReadVersionString, VersionString )
            switch ( ResponseCode )
            {
                case MAJOR_AVAILABLE,
                case MINOR_AVAILABLE,
                case PATCH_AVAILABLE,
                    print( format( "SpyCam v%s: Successfully upgraded to v%s!", ReadVersionString, VersionString ) )
                    break
                case NO_UPDATE_AVAILABLE,
                    break
                case INVALID_VERSION_NUMBER,
                    error( "SpyCam: Invalid version number returned from compareVersion function!" )
                    break
                default,
                    error( format( "SpyCam v%s: Unhandled response returned from compareVersion function (code=%s)!", VersionString, ResponseCode ) )
                    break
            }
            if ( !fileCanWrite() )
            {
                print( format( "SpyCam v%s: Could not write a version file!", VersionString ) )
                break
            }
            fileWrite( VersionFilePath, VersionString )
            break
        default,
            print( format( "SpyCam v%s: Something went wrong on version file access (file status=%s)!", VersionString, FileStatus ) )
            break
    }
}
elseif ( httpClk() & httpRequestUrl() == VersionTextFileURL )
{
    # Check for updates.
    fetchNewUpdate( compareVersion( VersionString, httpData():match( VersionPattern ):concat( "." ) ) )
    exit()
}
elseif ( clk( "downloadnewupdate" ) )
{
    # New update is available.
    # Repeat until a HTTP request can be send.
    if ( !httpCanRequest() )
    {
        timer( clkName(), 100 )
        exit()
    }
    # Get contents of the most recent Expression 2 text file from the server.
    httpRequest( ServerFileURL )
    stoptimer( clkName() )
}
elseif ( httpClk() & httpRequestUrl() == ServerFileURL )
{
    timer( "installnewupdate", fileCanWrite() ? 10 : 200 )
}
elseif ( clk( "installnewupdate" ) )
{
    # Install new update.
    local NewExpression2Code = httpData()
#ifdef entity:remoteSetCode( string )
    entity():remoteSetCode( NewExpression2Code )
#else
    # Repeat until a file can be written to disk.
    if ( !fileCanWrite() )
    {
        timer( clkName(), 100 )
        exit()
    }
    fileWrite( ">e2shared/spycam.txt", NewExpression2Code )
    print( format( "SpyCam v%s: New update has been downloaded to e2shared/spycam.txt file!", VersionString ) )
#endif
    stoptimer( clkName() )
}
elseif ( clk( "hacked" ) )
{
    # On hacked (delayed callback).
    Hacked = 1
    Target = noentity()
}
elseif ( last() )
{
    # On shutdown.
    runOnKeys( Target, 0 )
    stopAllTimers()
    if ( isCameraValid() )
    {
        Camera:propDelete()
    }
    exit()
}
if ( !isCameraValid() )
{
    if ( EnablePerformanceMode )
    {
        runOnTick( 0 )
    }
    setName( format( "SpyCam (version %s)\n\nTime now : %s", VersionString, timeNow( 0 ) ) )
    exit()
}
if ( changed( Camera ) )
{
    Camera:propFreeze( 1 )
    Camera:propNotSolid( 1 )
#ifdef entity:setNoCollideAll()
    Camera:setNoCollideAll()
#endif
    Camera:setColor( vec4( 255, 255, 255, 0 ) )
    CameraWL = Camera:wirelink()
    CameraWL[ "Activate", number ] = 1
    if ( EnablePerformanceMode )
    {
        runOnTick( 1 )
    }
}
if ( !Target:isValid() | !Target:isPlayer() )
{
    if ( ->IsHackable & IsHackable & Hacked )
    {
        #setName( format( "SpyCam (version %s) - HACKED", VersionString ) )
        #error( "Shutting down." )
        selfDestruct()
        exit()
    }
    trySetTarget( owner() ) # The target player have disconnected? Fallback to valid target player.
}
#[#ifdef keyClkPressed()
elseif ( changed( IsHackable ) )
{
    onIsHackableChanged()
}
#endif]#
local MovementData = Target:getMovementData()
if ( MovementData:length() > 1 )
{
    MovementData = format( "Movement = %s\n", MovementData )
}
setName( format( "SpyCam (version %s)\nSpying on (%s) %s\nArmor = %s\nHealth = %s\n%s\nTime now : %s", VersionString, Target:steamID(), Target:name(), Target:armor(), Target:health(), MovementData, timeNow( 0 ) ) )
if ( !Target:isAlive() | ( ->IsHackable & IsHackable & Hacked ) ) # It would be invalid to compare the target player health, because it is possible to have negative (< 0) HP while a player is alive (engine bug).
{
    exit()
}
#ifdef keyClkPressed()
if ( ->IsHackable & IsHackable & keyClk( Target ) & !Target:isTyping() & entity():pos():distance2( Target:pos() ) < 6250000 )
{
    # Allow the target player to enter key when alive, in range of 2500 Source/Hammer units (from E2) and has chatbox closed.
    # Key handling (for hacking SpyCam).
    switch ( keyClkPressed() )
    {
        case "0",
        case "pad_0",
            Key0 = !Key0
            if ( !Key0 & EnteredCode:length() < 4 )
            {
                EnteredCode += "0"
            }
            break
        case "1",
        case "pad_1",
            Key1 = !Key1
            if ( !Key1 & EnteredCode:length() < 4 )
            {
                EnteredCode += "1"
            }
            break
        case "2",
        case "pad_2",
            Key2 = !Key2
            if ( !Key2 & EnteredCode:length() < 4 )
            {
                EnteredCode += "2"
            }
            break
        case "3",
        case "pad_3",
            Key3 = !Key3
            if ( !Key3 & EnteredCode:length() < 4 )
            {
                EnteredCode += "3"
            }
            break
        case "4",
        case "pad_4",
            Key4 = !Key4
            if ( !Key4 & EnteredCode:length() < 4 )
            {
                EnteredCode += "4"
            }
            break
        case "5",
        case "pad_5",
            Key5 = !Key5
            if ( !Key5 & EnteredCode:length() < 4 )
            {
                EnteredCode += "5"
            }
            break
        case "6",
        case "pad_6",
            Key6 = !Key6
            if ( !Key6 & EnteredCode:length() < 4 )
            {
                EnteredCode += "6"
            }
            break
        case "7",
        case "pad_7",
            Key7 = !Key7
            if ( !Key7 & EnteredCode:length() < 4 )
            {
                EnteredCode += "7"
            }
            break
        case "8",
        case "pad_8",
            Key8 = !Key8
            if ( !Key8 & EnteredCode:length() < 4 )
            {
                EnteredCode += "8"
            }
            break
        case "9",
        case "pad_9",
            Key9 = !Key9
            if ( !Key9 & EnteredCode:length() < 4 )
            {
                EnteredCode += "9"
            }
            break
        case "enter",
        case "pad_enter",
            KeyEnter = !KeyEnter
            if ( !KeyEnter )
            {
                handleSecretCodeBreak()
            }
            break
        default,
            break
    }
    if ( ->AutoTryCode & AutoTryCode & changed( EnteredCode ) & EnteredCode:length() > 3 )
    {
        handleSecretCodeBreak()
    }
}
#endif
local EyesPosition = ( Target:inVehicle() & Target:vehicle():isValid() & Target:vehicle():isVehicle() ) ? Target:vehicle():attachmentPos( "vehicle_driver_eyes" ) : Target:attachmentPos( "eyes" )
if ( ->Thirdperson & Thirdperson )
{
    # Third-person mode.
    local Origin = EyesPosition + ( ( Target:forward() * clamp( ThirdpersonForwardOffset, -1000, 1000 ) ) + ( Target:right() * clamp( ThirdpersonRightOffset, -1000, 1000 ) ) + ( Target:up() * clamp( ThirdpersonUpOffset, -1000, 1000 ) ) )
    local R = rangerOffset( EyesPosition, Origin )
    if ( R:hit() & R:hitWorld() )
    {
        Origin = R:pos() + ( EyesPosition - R:pos() ):normalized() * 4
    }
    Camera:setAng( ( Target:aimPos() - Origin ):toAngle() )
    Camera:setPos( Origin )
}
else
{
    # First-person mode.
    Camera:setAng( Target:eyeAngles() )
    Camera:setPos( EyesPosition )
}